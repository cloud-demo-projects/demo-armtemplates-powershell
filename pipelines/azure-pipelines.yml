# Practical Design Approach
#
# Build Stage:
# 1. Create parameter file based upon input e.g. from Azure DevOps extension
# 2. Install & execute Pester tests on generated parameter file
# 3. Raise bug in case of issue in parameter file 
#
# Deploy Stage:
# 4. Deploy ARM template with template & parameter files
#

# Build Name
name: $(TeamProject)_$(SourceBranch)_$(BuildId)_$(Date:yyyyMMdd)

variables:
- template: variables/azure-pipelines-variables.yml

trigger:
- none

pool:
  vmImage: windows-latest

stages:
- stage: ARMDeployment
  jobs:
  - job: Deploy
    displayName: Deploy ARM Template
    condition: always()
    steps:
    - task: AzurePowerShell@5
      displayName: Install Pester Module
      name: install_pester_module
      inputs:
        azureSubscription: 'Nipun Bahri Subscription(bf0f6779-86d2-467e-8226-10f92a8ad378)'
        ScriptType: 'InlineScript'
        Inline: |
          Install-Module Pester -Force -SkipPublisherCheck -RequiredVersion 4.9.0
          Import-Module Pester -PassThru
        azurePowerShellVersion: 'LatestVersion'
    - task: AzurePowerShell@5
      displayName: Run Pester Tests
      name: run_pester_tests
      inputs:
        azureSubscription: 'Nipun Bahri Subscription(bf0f6779-86d2-467e-8226-10f92a8ad378)'
        ScriptType: 'InlineScript'
        Inline: |
          Invoke-Pester -Script @{Path="$(System.DefaultWorkingDirectory)/pester/Parameter.Tests.ps1"; Parameters=@{ ParameterPath="$(System.DefaultWorkingDirectory)/parameters/azuredeploy.parameters.dev.json" }}  -OutputFile $(Build.ArtifactStagingDirectory)/Test-Pester-Readme.xml
        azurePowerShellVersion: 'LatestVersion'
    - task: AzurePowerShell@5
      displayName: Deploy ARM Template
      name: deploy_arm_template
      inputs:
        azureSubscription: 'Nipun Bahri Subscription(bf0f6779-86d2-467e-8226-10f92a8ad378)'
        ScriptType: 'FilePath'
        ScriptPath: '$(scriptPath)/deploy.ps1'
        ScriptArguments: "-ResourceGroupName 'test-webapp' -Location 'west europe' -TemplatePath $(templatePath) -ParameterPath $(parameterPath)"
        azurePowerShellVersion: 'LatestVersion'
